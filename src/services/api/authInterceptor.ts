"use client";

// Fun√ß√£o para tratar respostas da API e verificar erro 401
export const handleApiResponse = async (response: Response): Promise<Response> => {
    if (response.status === 401) {
        // Limpa dados de autentica√ß√£o
        localStorage.removeItem('authToken');
        sessionStorage.removeItem('authToken');

        // Armazena mensagem de sess√£o expirada para exibir na tela de login
        sessionStorage.setItem(
            'authError',
            'Sua sess√£o expirou. Fa√ßa login novamente para continuar.'
        );

        // Redireciona para a p√°gina de login
        window.location.href = '/login';

        // Lan√ßa erro para interromper execu√ß√£o
        throw new Error('Session expired');
    }

    return response;
};

// Fun√ß√£o utilit√°ria para requisi√ß√µes fetch com tratamento de 401 e token autom√°tico
export const fetchWithAuth = async (
    url: string,
    options: RequestInit = {}
): Promise<Response> => {
    // Obt√©m o token de autentica√ß√£o
    const authToken = localStorage.getItem("authToken") || sessionStorage.getItem("authToken");

    // Log da requisi√ß√£o para debugging (apenas em desenvolvimento)
    if (process.env.NODE_ENV === 'development') {
        console.log(`üîó API Request: ${options.method || 'GET'} ${url}`);
        if (authToken) {
            console.log('üîê Token presente na requisi√ß√£o');
        } else {
            console.warn('‚ö†Ô∏è Token de autentica√ß√£o n√£o encontrado');
        }
    }

    // Prepara os headers com o token de autentica√ß√£o
    const headers: HeadersInit = {
        'Content-Type': 'application/json',
        ...options.headers,
        ...(authToken && { 'Token': authToken })
    };

    try {
        // Faz a requisi√ß√£o com os headers atualizados
        const response = await fetch(url, {
            ...options,
            headers
        });

        // Log da resposta para debugging (apenas em desenvolvimento)
        if (process.env.NODE_ENV === 'development') {
            console.log(`üì° API Response: ${response.status} ${response.statusText}`);
        }

        return handleApiResponse(response);
    } catch (error) {
        // Log de erros de rede
        if (process.env.NODE_ENV === 'development') {
            console.error(`‚ùå Network Error: ${error}`);
        }
        throw error;
    }
};
